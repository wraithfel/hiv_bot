from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import psycopg2
import json
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with open("db_config.json", "r", encoding="utf-8") as file:
    db_config = json.load(file)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ OpenAI API
with open("config.json", "r", encoding="utf-8") as file:
    config = json.load(file)
    TOKEN = config["BOT_TOKEN"]
    OPENAI_API_KEY = config["OPENAI_API_KEY"]

file_path = "useful_links.txt"

# –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
with open(file_path, "r", encoding="utf-8") as file:  # encoding="utf-8" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    file_content = file.read()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenAI API –∫–ª—é—á–∞
openai.api_key = OPENAI_API_KEY

client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    return psycopg2.connect(
        dbname=db_config["dbname"],
        user=db_config["user"],
        password=db_config["password"],
        host=db_config["host"],
        port=db_config["port"]
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
def get_categories():
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM full_menu ORDER BY category")
    categories = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return categories

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª—é–¥ –∏–∑ –º–µ–Ω—é
def get_full_menu():
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, name, category, description, photo_url, features, 
               ingredients, details, allergens, veg 
        FROM full_menu 
        ORDER BY id
    """)
    full_menu = [
        {
            "id": row[0],
            "name": row[1],
            "category": row[2],
            "description": row[3],
            "photo_url": row[4],
            "features": row[5],
            "ingredients": row[6],
            "details": row[7],
            "allergens": row[8],
            "veg": row[9]
        }
        for row in cursor.fetchall()
    ]
    cursor.close()
    conn.close()
    return full_menu



# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª—é–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_dishes_by_category(category):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM full_menu WHERE category = %s ORDER BY id", (category,))
    dishes = [{"id": row[0], "name": row[1]} for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    return dishes


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–ª—é–¥–µ –ø–æ id
def get_dish_by_id(dish_id):
    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT id, name, category, description, photo_url, features, 
               ingredients, details, allergens, veg 
        FROM full_menu 
        WHERE id = %s
        """,
        (dish_id,)
    )
    dish = cursor.fetchone()
    cursor.close()
    conn.close()
    return dish

def add_to_history(context, user_id, role, content):
    if 'conversation_history' not in context.user_data:
        context.user_data['conversation_history'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['conversation_history'].append({"role": role, "content": content})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(context.user_data['conversation_history']) > 10:
        context.user_data['conversation_history'] = context.user_data['conversation_history'][-10:]

def parse_value(val):
    return val if val != "NaN" else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞
async def send_dish_card(query, dish_data):
    if dish_data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏ –æ –±–ª—é–¥–µ
        (
            id, name, category, description, photo_url, features,
            ingredients, details, allergens, veg
        ) = dish_data

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞
        message = f"üç¥ *{name}*\n"
        message += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"

        if description:
            message += f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{parse_value(description)}\n\n"
        if features:
            message += f"‚≠ê *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n{parse_value(features)}\n\n"
        if ingredients:
            message += f"üìù *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{parse_value(ingredients)}\n\n"
        if allergens:
            message += f"‚ö†Ô∏è *–ê–ª–ª–µ—Ä–≥–µ–Ω—ã:*\n{parse_value(allergens)}\n\n"
        if veg:
            message += f"üå± *–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Ü–∞–º/–≤–µ–≥–∞–Ω–∞–º:* {parse_value(veg)}\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')],
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É", callback_data=f"ask_dish_{dish_data[0]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        if photo_url:
            try:
                await query.message.reply_photo(
                    photo=photo_url,
                    caption=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(e)
                message += "\nüåê –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                await query.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        else:
            await query.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_buttons_for_category(category_name):
    dishes = get_dishes_by_category(category_name)
    buttons = [[InlineKeyboardButton(dish["name"], callback_data=f"dish_{dish['id']}")] for dish in dishes]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
    return buttons

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(query):
    categories = get_categories()
    keyboard = [
        [InlineKeyboardButton(category, callback_data=category)] for category in categories
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="welcome")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query.message.text:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category(query, category_name):

    keyboard = get_buttons_for_category(category_name)
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query.message.text:
        await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '{category_name}':", reply_markup=reply_markup)
    else:
        await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '{category_name}':", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª—é–¥–∞
async def handle_dish(query, dish_id):
    dish_data = get_dish_by_id(dish_id)
    if dish_data:
        await send_dish_card(query, dish_data)
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
async def handle_welcome(query):
    keyboard = [
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("–í–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data='wine')],
        [InlineKeyboardButton("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã", callback_data='work_features')],
        [InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='test')],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data='links')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π button_handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == 'main_menu':
        await handle_main_menu(query)
    elif data in get_categories():
        await handle_category(query, data)
    elif data.startswith("dish_"):
        dish_id = int(data.split("_")[1])
        await handle_dish(query, dish_id)
    elif data.startswith("category_"):
        context.user_data['awaiting_question_for_dish'] = None
        category_name = data.split("_")[1]
        await query.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–ª—é–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ.")
        await handle_category(query, category_name)
    elif data.startswith("ask_dish_"):
        dish_id = int(data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±–ª—é–¥–∞ –∏–∑ callback_data
        dish_data = get_dish_by_id(dish_id)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å –ø–æ –±–ª—é–¥—É
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É:")
        context.user_data['awaiting_question_for_dish'] = dish_data
    elif data == 'welcome':
        await handle_welcome(query)
    elif query.data == 'links':
        try:
            keyboard = [
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞", callback_data='welcome')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=file_content,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
        except Exception as e:
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª—é–¥—É
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    history = context.user_data.get('conversation_history', [])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_history(context, update.effective_user.id, "user", user_message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –±–ª—é–¥—É
    if 'awaiting_question_for_dish' in context.user_data:
        dish_data = context.user_data['awaiting_question_for_dish']
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–ª—é–¥–µ
        full_menu = get_full_menu()

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–ª—é–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        prompt = f"–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:{history}–ë–ª—é–¥–æ: {dish_data[1]}\n–í—Å–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–ª—é–¥–µ: {dish_data[2:]}\n–í–æ—Ç –≤—Å–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, c –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ –±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è{full_menu}–í–æ–ø—Ä–æ—Å: {user_message}"
        print(history)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": prompt}
                ]
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
            bot_response = response.choices[0].message.content

            add_to_history(context, update.effective_user.id, "assistant", bot_response)

            keyboard = [
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f'category_{dish_data[2]}')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(bot_response, parse_mode='Markdown', reply_markup=reply_markup)

        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")



# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="welcome")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \"–•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ\"! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞.",
        reply_markup=reply_markup
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question))
    app.run_polling()

if __name__ == "__main__":
    main()
