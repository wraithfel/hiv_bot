#!/usr/bin/env python3
"""
–ë–æ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "–•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ".

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    ‚Ä¢ –û–±—â–∏–π –¥–∏–∞–ª–æ–≥ —Å OpenAI –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.
    ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º (–æ–±—â–∏–π —Ç–µ—Å—Ç, —Ç–µ—Å—Ç –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º, —Ç–µ—Å—Ç –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º —Ä–∞–±–æ—Ç—ã, —Ç–µ—Å—Ç –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º).
    ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª—é–¥ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤.
    ‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –±–ª—é–¥ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤, —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: —Å–º–µ–Ω—ã (—É—Ç—Ä–µ–Ω–Ω—è—è, –¥–Ω–µ–≤–Ω–∞—è, –≤–µ—á–µ—Ä–Ω—è—è –∏ —Ç.–¥.), –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Å—ã–ª–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
"""

import json
import logging
import random
import re
import asyncio

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    Message,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from assistance_create import *
from handle_text_features import *
from db_func import *

import openai
from openai import AsyncOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫–ª—é—á OpenAI)
with open("../config/config.json", "r", encoding="utf-8") as file:
    config = json.load(file)
    TOKEN = config["BOT_TOKEN"]
    OPENAI_API_KEY = config["OPENAI_API_KEY"]

openai.api_key = OPENAI_API_KEY
client = AsyncOpenAI(api_key=OPENAI_API_KEY)


# =============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================================================================
def clean_chatgpt_response(response: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç ChatGPT –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.
    """
    cleaned_response = re.sub(r"„Äê\d+(?::\d+)?‚Ä†source„Äë", "", response)
    return cleaned_response.strip()


def parse_value(val: str) -> str:
    """
    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ "NULL", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'.
    """
    return val if val != "NULL" else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"


def add_to_history(context: ContextTypes.DEFAULT_TYPE, user_id: int, role: str, content: str) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """
    if 'conversation_history' not in context.user_data:
        context.user_data['conversation_history'] = []
    context.user_data['conversation_history'].append({"role": role, "content": content})
    if len(context.user_data['conversation_history']) > 10:
        context.user_data['conversation_history'] = context.user_data['conversation_history'][-10:]


# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI
# =============================================================================
async def process_openai_general_answer(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_prompt: str,
    waiting_message: Message
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –¥–ª—è –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    try:
        thread = await client.beta.threads.create(
            messages=[{"role": "user", "content": user_prompt}]
        )
        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id="asst_35v1pLP2iy1MCdxvAZbPDviU"
        )
        messages = list(
            await client.beta.threads.messages.list(thread_id=thread.id, run_id=run.id)
        )
        if messages:
            _, messages_list = messages[0]
            message = messages_list[0]
            text_content = message.content[0].text.value
            message_content = clean_chatgpt_response(text_content)
            add_to_history(context, update.effective_user.id, "assistant", message_content)
            keyboard = [[InlineKeyboardButton("‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="stop_chat")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await waiting_message.edit_text(
                f"üí¨ {message_content}",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await waiting_message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:")
        await waiting_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def process_openai_answer_for_test(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_prompt: str,
    waiting_message: Message,
    test: dict,
    next_question_func
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        thread = await client.beta.threads.create(
            messages=[{"role": "user", "content": user_prompt}]
        )
        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id="asst_35v1pLP2iy1MCdxvAZbPDviU"
        )
        messages = list(
            await client.beta.threads.messages.list(thread_id=thread.id, run_id=run.id)
        )
        if messages:
            _, messages_list = messages[0]
            message = messages_list[0]
            text_content = message.content[0].text.value
            assistant_response = clean_chatgpt_response(text_content)
            await waiting_message.edit_text(f"üí¨ {assistant_response}", parse_mode="Markdown")
            if "–ø—Ä–∞–≤–∏–ª—å–Ω–æ" in assistant_response.lower() and "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" not in assistant_response.lower():
                test["score"] += 1
            test["current_index"] += 1
            await next_question_func(update, context)
        else:
            await waiting_message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ OpenAI:")
        await waiting_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def process_openai_answer_for_composition(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_prompt: str,
    waiting_message: Message,
    dish_data
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥–∞.
    """
    try:
        thread = await client.beta.threads.create(
            messages=[{"role": "user", "content": user_prompt}]
        )
        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id="asst_35v1pLP2iy1MCdxvAZbPDviU"
        )
        messages = list(
            await client.beta.threads.messages.list(thread_id=thread.id, run_id=run.id)
        )
        if messages:
            _, messages_list = messages[0]
            message = messages_list[0]
            text_content = message.content[0].text.value
            assistant_response = clean_chatgpt_response(text_content)
            category_callback = f"test_compositions_{dish_data[2]}"
            keyboard = [[InlineKeyboardButton("üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=category_callback)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await waiting_message.edit_text(
                f"üí¨ {assistant_response}",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            context.user_data.pop("test_dish", None)
            context.user_data.pop("test_composition_in_progress", None)
        else:
            await waiting_message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ OpenAI:")
        await waiting_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def process_openai_answer_for_entity(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_prompt: str,
    waiting_message: Message,
    entity_data,
    entity_type: str,
    entity_key: str
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª—é–¥–∞–º –∏–ª–∏ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    try:
        thread = await client.beta.threads.create(
            messages=[{"role": "user", "content": user_prompt}]
        )
        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id="asst_35v1pLP2iy1MCdxvAZbPDviU"
        )
        messages = list(
            await client.beta.threads.messages.list(thread_id=thread.id, run_id=run.id)
        )
        if messages:
            _, messages_list = messages[0]
            message = messages_list[0]
            text_content = message.content[0].text.value
            assistant_response = clean_chatgpt_response(text_content)
            response_text = (
                f"{assistant_response}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É *–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã*."
            )
            add_to_history(context, update.effective_user.id, "assistant", assistant_response)
            if "order" in entity_key:
                callback_data = f'order_dish_{entity_data[0]}' if "dish" in entity_key else f'order_drink_{entity_data[0]}'
            else:
                callback_data = f'category_{entity_data[2]}' if "dish" in entity_key else f'back_drink_{entity_data[2]}_{entity_data[-1]}'
            keyboard = [[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=callback_data)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await waiting_message.edit_text(response_text, parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await waiting_message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ —Å—É—â–Ω–æ—Å—Ç–∏:")
        await waiting_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# =============================================================================
async def handle_test_general(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—â–∏–π —Ç–µ—Å—Ç, –æ–±—ä–µ–¥–∏–Ω—è—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ, –º–µ–Ω—é –∏ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    work_q = await get_random_work_features_general(3)
    menu_q = await get_random_menu_questions_general(6)
    drink_q = await get_random_drink_questions_general(6)
    all_questions = work_q + menu_q + drink_q
    random.shuffle(all_questions)
    context.user_data['test_general'] = {"questions": all_questions, "current_index": 0, "score": 0}
    context.user_data['test_general_in_progress'] = True
    await send_next_general_question(query, context)


async def send_next_general_question(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    test = context.user_data.get('test_general')
    if not test or test["current_index"] >= len(test["questions"]):
        score = test["score"]
        total = len(test["questions"])
        context.user_data.pop("test_general_in_progress", None)
        context.user_data.pop("test_general", None)
        await query.message.reply_text(
            f"üéâ –û–±—â–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ *{score}/{total}* –±–∞–ª–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test")]])
        )
        return
    current_question = test["questions"][test["current_index"]]
    context.user_data["current_general_question"] = current_question
    await query.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {test['current_index'] + 1}:\n{current_question['question']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="cancel_test")]])
    )


async def handle_general_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Ç–µ—Å—Ç–µ.
    """
    user_message = update.message.text.strip()
    test = context.user_data.get('test_general')
    current_question = context.user_data.get('current_general_question')
    if not test or not current_question:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        return
    user_prompt = (
        "–¢—ã ‚Äî –º–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û—Ü–µ–Ω–∏ –º–æ–π –æ—Ç–≤–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω–æ, "
        "—Å —É—á–µ—Ç–æ–º —Å–º—ã—Å–ª–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∞ –Ω–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"üìå –í–æ–ø—Ä–æ—Å: {current_question['question']}\n"
        f"‚úçÔ∏è –ú–æ–π –æ—Ç–≤–µ—Ç: {user_message}\n"
        f"‚úÖ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['answer']}\n"
        f"üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ: {current_question['explanation']}\n\n"
        "–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:\n"
        "- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –±–ª–∏–∑–æ–∫ –ø–æ —Å–º—ã—Å–ª—É –∫ –≤–µ—Ä–Ω–æ–º—É ‚Äî –Ω–∞–ø–∏—à–∏ '–ø—Ä–∞–≤–∏–ª—å–Ω–æ', –Ω–æ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º\n"
        "- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ' —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏\n"
    )
    waiting_message = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_test(update, context, user_prompt, waiting_message, test, send_next_general_question))


async def handle_test_drinks(query) -> None:
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    keyboard = [
        [InlineKeyboardButton("üç∑ –ö—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞", callback_data="test_drink_red")],
        [InlineKeyboardButton("üçæ –ë–µ–ª—ã–µ –≤–∏–Ω–∞", callback_data="test_drink_white")],
        [InlineKeyboardButton("ü•Ç –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–Ω–∞", callback_data="test_drink_wine")],
        [InlineKeyboardButton("üçπ –î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏", callback_data="test_drink_other")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="test")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)


async def handle_test_drink_category(query, category: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    category_map = {
        "red": "–ö—Ä–∞—Å–Ω—ã–µ –≤–∏–Ω–∞",
        "white": "–ë–µ–ª—ã–µ –≤–∏–Ω–∞",
        "wine": "–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–Ω–∞",
        "other": "–î—Ä—É–≥–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"
    }
    category_name = category_map.get(category, category)
    questions = await get_random_drink_questions(category_name)
    if not questions:
        await query.message.reply_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    context.user_data['test_drinks'] = {"questions": questions, "current_index": 0, "score": 0}
    context.user_data['test_drinks_in_progress'] = True
    await send_next_drink_question(query, context)


async def send_next_drink_question(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    test = context.user_data.get('test_drinks')
    if not test or test["current_index"] >= len(test["questions"]):
        score = test["score"]
        total = len(test["questions"])
        context.user_data.pop("test_drinks_in_progress", None)
        context.user_data.pop("test_drinks", None)
        await query.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ *{score}/{total}* –±–∞–ª–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="test")]])
        )
        return
    current_question = test["questions"][test["current_index"]]
    context.user_data["current_drink_question"] = current_question
    await query.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {test['current_index'] + 1}:\n{current_question['question']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="cancel_test")]])
    )


async def handle_drink_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    user_message = update.message.text.strip()
    test = context.user_data.get('test_drinks')
    current_question = context.user_data.get('current_drink_question')
    if not test or not current_question:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        return
    user_prompt = (
        f"–¢—ã ‚Äî –º–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –Ω–∞–ø–∏—Ç–∫–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ. "
        f"–û—Ü–µ–Ω–∏ –º–æ–π –æ—Ç–≤–µ—Ç **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω–æ**, —É—á–∏—Ç—ã–≤–∞—è **—Å–º—ã—Å–ª** –∏ **–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞**, –∞ –Ω–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"üìå –í–æ–ø—Ä–æ—Å: {current_question['question']}\n"
        f"‚úçÔ∏è –ú–æ–π –æ—Ç–≤–µ—Ç: {user_message}\n"
        f"‚úÖ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['answer']}\n"
        f"üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ: {current_question['explanation']}\n\n"
        f"ü§ñ –ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–±–ª–∏–∑–æ–∫ –ø–æ —Å–º—ã—Å–ª—É** –∫ –≤–µ—Ä–Ω–æ–º—É ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–π **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–≤–µ—Ä–Ω—ã–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏** ‚Äî —Ç–æ–∂–µ **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**, –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—á–µ\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–æ—à–∏–±–æ—á–Ω—ã–π**, –º—è–≥–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏ –Ω–∞–ø–∏—à–∏ **‚ùå –ü–æ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç\n"
    )
    waiting_message = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_test(update, context, user_prompt, waiting_message, test, send_next_drink_question))


async def handle_work_features_test(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤).
    """
    questions = await get_random_questions()  # –§—É–Ω–∫—Ü–∏—è –∏–∑ db_func
    context.user_data['current_test'] = {"questions": questions, "current_index": 0, "score": 0}
    context.user_data['test_in_progress'] = True
    await send_next_question(query, context)


async def send_next_question(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º —Ä–∞–±–æ—Ç—ã.
    """
    test = context.user_data.get('current_test')
    if not test or test["current_index"] >= len(test["questions"]):
        score = test["score"]
        total = len(test["questions"])
        for key in ['test_in_progress', 'current_test', 'current_question']:
            context.user_data.pop(key, None)
        await query.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ *{score}/{total}* –±–∞–ª–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test")]])
        )
        return
    current_question = test["questions"][test["current_index"]]
    context.user_data["current_question"] = current_question
    await query.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {test['current_index'] + 1}:\n{current_question['question']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="cancel_test")]])
    )


async def handle_cancel_test(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç" ‚Äì —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    keys_to_remove = [
        'test_in_progress', 'current_test', 'current_question',
        'test_menu_in_progress', 'test_drinks_in_progress', 'test_general_in_progress'
    ]
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    await query.message.reply_text(
        "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="test")]])
    )


async def handle_work_features_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º —Ä–∞–±–æ—Ç—ã.
    """
    user_message = update.message.text.strip()
    test = context.user_data.get('current_test')
    current_question = context.user_data.get('current_question')
    if not test or not current_question:
        await update.message.reply_text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        return
    user_prompt = (
        f"–¢—ã ‚Äî –º–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ. "
        f"–û—Ü–µ–Ω–∏ –º–æ–π –æ—Ç–≤–µ—Ç **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω–æ**, —É—á–∏—Ç—ã–≤–∞—è **—Å–º—ã—Å–ª** –∏ **–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞**, –∞ –Ω–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"üìå –í–æ–ø—Ä–æ—Å: {current_question['question']}\n"
        f"‚úçÔ∏è –ú–æ–π –æ—Ç–≤–µ—Ç: {user_message}\n"
        f"‚úÖ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['correct_answer']}\n"
        f"üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ: {current_question['explanation']}\n\n"
        f"ü§ñ –ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–±–ª–∏–∑–æ–∫ –ø–æ —Å–º—ã—Å–ª—É** –∫ –≤–µ—Ä–Ω–æ–º—É ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–π **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–≤–µ—Ä–Ω—ã–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏** ‚Äî —Ç–æ–∂–µ **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**, –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—á–µ\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–æ—à–∏–±–æ—á–Ω—ã–π**, –º—è–≥–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏ –Ω–∞–ø–∏—à–∏ **‚ùå –ü–æ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç\n"
    )
    waiting_message = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_test(update, context, user_prompt, waiting_message, test, send_next_question))


async def handle_test_full_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ –≤—Å–µ–º—É –º–µ–Ω—é (–±–ª—é–¥–∞–º).
    """
    questions = await get_random_menu_questions()  # –§—É–Ω–∫—Ü–∏—è –∏–∑ db_func
    context.user_data['test_menu'] = {"questions": questions, "current_index": 0, "score": 0}
    context.user_data['test_menu_in_progress'] = True
    await send_next_menu_question(query, context)


async def send_next_menu_question(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ –ø–æ –º–µ–Ω—é.
    """
    test = context.user_data.get('test_menu')
    if not test or test["current_index"] >= len(test["questions"]):
        score = test["score"]
        total = len(test["questions"])
        context.user_data.pop("test_menu_in_progress", None)
        context.user_data.pop("test_menu", None)
        await query.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ *{score}/{total}* –±–∞–ª–ª–æ–≤.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test")]])
        )
        return
    current_question = test["questions"][test["current_index"]]
    context.user_data["current_menu_question"] = current_question
    await query.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {test['current_index'] + 1}: {current_question['question']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="cancel_test")]])
    )


async def handle_menu_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ –ø–æ –º–µ–Ω—é.
    """
    user_message = update.message.text.strip()
    test = context.user_data.get('test_menu')
    current_question = context.user_data.get('current_menu_question')
    if not test or not current_question:
        await update.message.reply_text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
        return
    user_prompt = (
        f"–¢—ã ‚Äî –º–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ. "
        f"–û—Ü–µ–Ω–∏ –º–æ–π –æ—Ç–≤–µ—Ç **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω–æ**, —É—á–∏—Ç—ã–≤–∞—è **—Å–º—ã—Å–ª** –∏ **–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞**, –∞ –Ω–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"üìå –í–æ–ø—Ä–æ—Å: {current_question['question']}\n"
        f"‚úçÔ∏è –ú–æ–π –æ—Ç–≤–µ—Ç: {user_message}\n"
        f"‚úÖ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['answer']}\n"
        f"üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–≠—Ç—É —á–∞—Å—Ç—å –∑–Ω–∞–µ—à—å —Ç—ã - –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è): {current_question['explanation']}\n\n"
        f"ü§ñ –ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–±–ª–∏–∑–æ–∫ –ø–æ —Å–º—ã—Å–ª—É** –∫ –≤–µ—Ä–Ω–æ–º—É ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–π **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–≤–µ—Ä–Ω—ã–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏** ‚Äî —Ç–æ–∂–µ **‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!**, –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—á–µ\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç **–æ—à–∏–±–æ—á–Ω—ã–π**, –º—è–≥–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∏ –Ω–∞–ø–∏—à–∏ **‚ùå –ü–æ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n"
        f"- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç\n"
    )
    waiting_message = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_test(update, context, user_prompt, waiting_message, test, send_next_menu_question))


async def handle_test_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äì –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–ø–∏—Ç–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã, –æ–±—â–∏–π —Ç–µ—Å—Ç).
    """
    keyboard = [
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="test_main_menu")],
        [InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data="test_drinks")],
        [InlineKeyboardButton("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã", callback_data="test_work_features")],
        [InlineKeyboardButton("–û–±—â–∏–π —Ç–µ—Å—Ç", callback_data="test_general")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="welcome")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)


async def handle_test_main_menu(query) -> None:
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    keyboard = [
        [InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º", callback_data="test_compositions")],
        [InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º—É –º–µ–Ω—é", callback_data="test_full_menu")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)


async def handle_test_compositions(query) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–ø–æ —Å–æ—Å—Ç–∞–≤–∞–º" ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    categories = await get_categories()
    keyboard = [
        [InlineKeyboardButton(category, callback_data=f"test_compositions_{category}")]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test_main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_test_compositions_category(query, category_name: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º.
    """
    dishes = await get_dishes_by_category(category_name)
    if not dishes:
        await query.edit_message_text(
            f"üö´ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}* –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test_compositions")]])
        )
        return
    keyboard = [
        [InlineKeyboardButton(dish["name"], callback_data=f"test_composition_dish_{dish['id']}")]
        for dish in dishes
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="test_compositions")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}* –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def handle_test_composition_dish(query, dish_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ —Å–æ—Å—Ç–∞–≤—É.
    """
    dish_data = await get_dish_ingredients(dish_id)
    d2 = await get_dish_by_id(dish_id)
    if not dish_data:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–∞–≤–µ –±–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    context.user_data["test_composition_in_progress"] = True
    context.user_data["test_dish"] = {
        "dish_id": dish_id,
        "dish_name": dish_data["name"],
        "correct_ingredients": dish_data["ingredients"]
    }
    await query.message.reply_text(
        f"üìã –ù–∞–∑–æ–≤–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ *{dish_data['name']}*.\n"
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"test_compositions_{d2[2]}")]])
    )


async def handle_test_composition_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ –ø–æ —Å–æ—Å—Ç–∞–≤—É –±–ª—é–¥–∞.
    """
    user_message = update.message.text.strip().lower()
    test_dish = context.user_data.get("test_dish")
    if not test_dish:
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∑–∞–Ω–æ–≤–æ.")
        return
    dish_id = test_dish['dish_id']
    dish_data = await get_dish_by_id(dish_id)
    user_prompt = (
        f"–ë–ª—é–¥–æ: {test_dish['dish_name']}\n"
        f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}\n"
        f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤: {test_dish['correct_ingredients'].lower()}\n\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —É–∫–∞–∂–∏, –∫–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ª–∏—à–Ω–∏–µ (–µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å), "
        f"–∏ –∫–∞–∫–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–≤–∞–ª –∏—Ö). "
        f"–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏–∑–±–µ–≥–∞—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π. –í–µ—Ä–¥–∏–∫—Ç: '–ø—Ä–∞–≤–∏–ª—å–Ω–æ' –∏–ª–∏ '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'."
    )
    waiting_message = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_composition(update, context, user_prompt, waiting_message, dish_data))


# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª—é–¥ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤
# =============================================================================
async def send_dish_card(query, dish_data) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Å–ø–∏—Å–∫–æ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    if dish_data:
        (id, name, category, description, photo_url, features,
         ingredients, details, allergens, veg) = dish_data
        message = f"üç¥ *{name}*\n"
        message += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        if description:
            message += f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{parse_value(description)}\n\n"
        if features:
            message += f"‚≠ê *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n{parse_value(features)}\n\n"
        if ingredients:
            message += f"üìù *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{parse_value(ingredients)}\n\n"
        if allergens:
            message += f"‚ö†Ô∏è *–ê–ª–ª–µ—Ä–≥–µ–Ω—ã:*\n{parse_value(allergens)}\n\n"
        if veg:
            message += f"üå± *–ü–æ–¥—Ö–æ–¥–∏—Ç –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Ü–∞–º/–≤–µ–≥–∞–Ω–∞–º:* {parse_value(veg)}\n\n"
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')],
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É", callback_data=f"ask_dish_{dish_data[0]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if photo_url:
            try:
                await query.message.reply_photo(
                    photo=photo_url,
                    caption=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                message += "\nüåê –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                await query.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        else:
            await query.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def send_drink_card(query, drink_data) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—Ç–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Å–æ—Å—Ç–∞–≤–æ–º, –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏ –≤–∫—É—Å–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º.
    """
    if drink_data:
        (id, name, category, description, photo_url, notes,
         ingredients, aroma_profile, taste_profile, sugar_content,
         producer, gastropair, subcategory) = drink_data
        message = f"üç∑ *{name}*\n"
        message += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        if subcategory:
            message += f"üßæ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n\n"
        if description:
            message += f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}\n\n"
        if ingredients:
            message += f"üìù *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients}\n\n"
        if aroma_profile:
            message += f"üëÉ *–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:*\n{aroma_profile}\n\n"
        if taste_profile:
            message += f"üëÖ *–í–∫—É—Å–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n{taste_profile}\n\n"
        if sugar_content:
            message += f"üç¨ *–°—Ç–∏–ª—å –Ω–∞–ø–∏—Ç–∫–∞:*\n{sugar_content}\n\n"
        if producer:
            message += f"üè≠ *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:*\n{producer}\n\n"
        if gastropair:
            message += f"üçΩ *–ì–∞—Å—Ç—Ä–æ–ø–∞—Ä–∞:*\n{gastropair}\n\n"
        if notes:
            message += f"üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*\n{notes}\n\n"
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='drinks')],
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø–∏—Ç–∫—É", callback_data=f"ask_drink_{drink_data[0]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if photo_url:
            try:
                await query.message.reply_photo(
                    photo=photo_url,
                    caption=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            except Exception as e:
                message += "\nüåê –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
                await query.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        else:
            await query.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
# =============================================================================
async def handle_main_menu(query) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥.
    """
    categories = await get_categories()
    keyboard = [[InlineKeyboardButton(category, callback_data=category)] for category in categories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="welcome")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)


async def handle_take_order(query) -> None:
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    keyboard = [
        [InlineKeyboardButton("–ï–¥–∞", callback_data='order_food')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data='order_drinks')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='welcome')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞:", reply_markup=reply_markup)


async def handle_order_food(query) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥—ã ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥.
    """
    categories = await get_categories()
    keyboard = [[InlineKeyboardButton(category, callback_data=f'order_category_{category}')] for category in categories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='take_order')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    current_text = query.message.text if query.message.text else ""
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥—ã:"
    if current_text != new_text or query.message.reply_markup != reply_markup:
        await query.edit_message_text(new_text, reply_markup=reply_markup)
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ. –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω.")


async def handle_order_drinks(query) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø–∏—Ç–∫–æ–≤.
    """
    categories = await get_drink_categories()
    keyboard = [[InlineKeyboardButton(category, callback_data=f'drink_order_category_{category}')] for category in categories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='take_order')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤:", reply_markup=reply_markup)


async def handle_drink_order_category(query, category_name: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    subcategories = await get_subcategories_by_category(category_name)
    keyboard = [
        [InlineKeyboardButton(subcategory, callback_data=f'drk_ord_sub_{category_name}_{subcategory}')]
        for subcategory in subcategories
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='order_drinks')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def handle_drink_order_subcategory(query, category_name: str, subcategory_name: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–ø–∏—Ç–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    drinks = await get_drinks_by_subcategory(category_name, subcategory_name)
    keyboard = [[InlineKeyboardButton(drink["name"], callback_data=f"order_drink_{drink['id']}")] for drink in drinks]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"drink_order_category_{category_name}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text(
            f"–ù–∞–ø–∏—Ç–∫–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{subcategory_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            f"–ù–∞–ø–∏—Ç–∫–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{subcategory_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def handle_order_drink(query, drink_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—Ç–∫–∞.
    """
    drink_data = await get_drink_by_id(drink_id)
    if drink_data:
        await send_drink_card(query, drink_data)
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def handle_drink_ok(query, drink_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    """
    drink_data = await get_drink_by_id(drink_id)
    if not drink_data:
        await query.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    context.user_data['current_drink'] = drink_data
    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{drink_data[1]}*.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞:",
        parse_mode='Markdown'
    )


async def handle_order_category(query, category_name: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª—é–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    dishes = await get_dishes_by_category(category_name)
    buttons = [[InlineKeyboardButton(dish["name"], callback_data=f"order_dish_{dish['id']}")]
               for dish in dishes]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'order_food')])
    reply_markup = InlineKeyboardMarkup(buttons)
    try:
        if query.message.text:
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    except Exception as e:
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_order_dish(query, dish_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞ ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞.
    """
    dish_data = await get_dish_by_id(dish_id)
    if dish_data:
        await send_dish_card(query, dish_data)
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def handle_dish_ok(query, dish_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
    """
    dish_data = await get_dish_by_id(dish_id)
    if not dish_data:
        await query.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    context.user_data['current_dish'] = dish_data
    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{dish_data[1]}*.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞:",
        parse_mode='Markdown'
    )


async def handle_finish_order(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äì –≤—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    order = context.user_data.get('order', [])
    if not order:
        await query.message.reply_text(
            "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–ø–∏—Ç–∫–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –µ–¥—ã", callback_data="order_food")],
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø–∏—Ç–∫–æ–≤", callback_data="order_drinks")],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="welcome")]
            ])
        )
        return
    message = "üìù *–í–∞—à –∑–∞–∫–∞–∑:*\n\n"
    for item in order:
        if 'dish' in item:
            dish_name = item['dish'][1]
            quantity = item['quantity']
            if item['comment'] is not None:
                comment = item['comment']
                message += f"üçΩ *{dish_name}* x{quantity}\n  üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            else:
                message += f"üçΩ *{dish_name}* x{quantity}\n\n"
        elif 'drink' in item:
            drink_name = item['drink'][1]
            quantity = item['quantity']
            if item['comment'] is not None:
                comment = item['comment']
                message += f"üç∑ *{drink_name}* x{quantity}\n  üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            else:
                message += f"üç∑ *{drink_name}* x{quantity}\n\n"
    context.user_data.pop('order', None)
    await query.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="welcome")]
        ])
    )


async def handle_drinks_menu(query) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø–∏—Ç–∫–æ–≤.
    """
    categories = await get_drink_categories()
    keyboard = [[InlineKeyboardButton(category, callback_data=f"drink_category_{category}")] for category in categories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="welcome")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤:", reply_markup=reply_markup)


async def handle_category(query, category_name: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª—é–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é).
    """
    dishes = await get_dishes_by_category(category_name)
    buttons = [[InlineKeyboardButton(dish["name"], callback_data=f"dish_{dish['id']}")] for dish in dishes]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(buttons)
    if query.message.text:
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ *{category_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ *{category_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def handle_drink_category(query, category_name: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    subcategories = await get_subcategories_by_category(category_name)
    if "–î—Ä—É–≥–æ–µ" in subcategories:
        subcategories.remove("–î—Ä—É–≥–æ–µ")
        subcategories.append("–î—Ä—É–≥–æ–µ")
    keyboard = [[InlineKeyboardButton(subcategory, callback_data=f"drink_subcategory_{category_name}_{subcategory}")]
                for subcategory in subcategories]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="drinks")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def handle_drink_subcategory(query, category_name: str, subcategory_name: str) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–ø–∏—Ç–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    drinks = await get_drinks_by_subcategory(category_name, subcategory_name)
    keyboard = [[InlineKeyboardButton(drink["name"], callback_data=f"get_drink_{drink['id']}")]
                for drink in drinks]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"drink_category_{category_name}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text(
            f"–ù–∞–ø–∏—Ç–∫–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{subcategory_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await query.message.reply_text(
            f"–ù–∞–ø–∏—Ç–∫–∏ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{subcategory_name}*:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


async def handle_dish(query, dish_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞ ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞.
    """
    dish_data = await get_dish_by_id(dish_id)
    if dish_data:
        await send_dish_card(query, dish_data)
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode='Markdown')


async def handle_drink(query, drink_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞ ‚Äì –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—Ç–∫–∞.
    """
    drink_data = await get_drink_by_id(drink_id)
    if drink_data:
        await send_drink_card(query, drink_data)
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode='Markdown')


# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª—é–¥–∞–º –∏ –Ω–∞–ø–∏—Ç–∫–∞–º
# =============================================================================
async def handle_entity_question(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    entity_key: str,
    entity_type: str
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª—é–¥–∞–º –∏ –Ω–∞–ø–∏—Ç–∫–∞–º.
    """
    if entity_key not in context.user_data:
        await update.message.reply_text(f"‚ùå –í–æ–ø—Ä–æ—Å –ø–æ {entity_type} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ {entity_type} —Å–Ω–∞—á–∞–ª–∞.")
        return
    entity_data = context.user_data[entity_key]
    user_message = update.message.text.strip()
    user_prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–º—É –¥–µ–ª—É –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞-—Å—Ç–∞–∂–µ—Ä–∞. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–µ–Ω—é (–±–ª—é–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏), —Å–µ—Ä–≤–∏—Å–æ–º, —Ä–∞–±–æ—Ç–æ–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ –≤—Å–µ–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '–•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ'.\n\n"
        "üìå –¢—ã –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–º–µ–Ω—é, –Ω–∞–ø–∏—Ç–∫–∏, —Å–µ—Ä–≤–∏—Å). "
        "üìå –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–ª—é–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "üìå –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –ø—Ä–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –Ω–æ –Ω—É–∂–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–ø–∏—Ç–∫–∞ –Ω–µ—Ç, —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –≤ –º–µ–Ω—é, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¢–û–õ–¨–ö–û –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "üìå –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–∞—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–∏–¥—É–º–∞–π –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Å—Ç—Ä–æ–ø–∞—Ä—ã –º–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –±–ª—é–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏ –¢–û–õ–¨–ö–û –∏–∑ –¥–∞–Ω–Ω—ã—Ö, "
        "üìå –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –Ω–æ–≤—ã—Ö –±–ª—é–¥, –Ω–æ–≤—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, –Ω–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –Ω–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. "
        "üìå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±–ª—é–¥–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∏ –Ω–µ –ø—ã—Ç–∞–π—Å—è –µ–≥–æ –æ–ø–∏—Å–∞—Ç—å.\n\n"
        f"üó£ –í–æ–ø—Ä–æ—Å –ø–æ {entity_type}: {entity_data}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
    )
    waiting_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(process_openai_answer_for_entity(
        update, context, user_prompt, waiting_message, entity_data, entity_type, entity_key
    ))


# =============================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
# =============================================================================
async def handle_welcome(query) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤.
    """
    keyboard = [
        [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data='drinks')],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='work_features')],
        [InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='test')],
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data='take_order')],
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data='general_question')],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data='links')],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.text:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    keys_to_remove = [
        'test_in_progress', 'test_menu_in_progress', 'test_composition_in_progress',
        'current_test', 'test_drinks_in_progress', 'test_general_in_progress',
        'current_question', 'current_drink_question', 'current_menu_question'
    ]
    for key in keys_to_remove:
        context.user_data.pop(key, None)
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="welcome")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üç∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ *–•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ*! üç¥\n\n"
        "üëâ –ù–∞–∂–º–∏—Ç–µ *–ù–∞—á–∞—Ç—å*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–∞!",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


# =============================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (callback_query)
# =============================================================================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'main_menu':
        await handle_main_menu(query)
    elif data == "work_features":
        keyboard = [
            [InlineKeyboardButton("–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞", callback_data="work_morning")],
            [InlineKeyboardButton("–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞", callback_data="work_day")],
            [InlineKeyboardButton("–í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞", callback_data="work_evening")],
            [InlineKeyboardButton("–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –•–∏–í–æ–º", callback_data="work_dating")],
            [InlineKeyboardButton("–û—Å–Ω–æ–≤—ã –æ—Å–Ω–æ–≤", callback_data="work_base")],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞ —Å iiko", callback_data="work_iiko")],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–¥–∞—á–µ", callback_data="work_bring")],
            [InlineKeyboardButton("–®–∞–≥–∏ —Å–µ—Ä–≤–∏—Å–∞", callback_data="work_service")],
            [InlineKeyboardButton("–•–æ—Å—Ç", callback_data="work_host")],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", callback_data="work_delivery")],
            [InlineKeyboardButton("–û –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –≤–∏–Ω–∞", callback_data="work_wine")],
            [InlineKeyboardButton("–†–∞–±–æ—Ç–∞ —Å –±–∞—Ä–æ–º", callback_data="work_bar")],
            [InlineKeyboardButton("–û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏", callback_data="work_special")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="welcome")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    elif data == "work_morning":
        await handle_morning_shift(query)  # –§—É–Ω–∫—Ü–∏—é —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    elif data == 'test':
        await handle_test_menu(query, context)
    elif data == 'instruction':
        await handle_instruction(query)  # –§—É–Ω–∫—Ü–∏—é —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    elif data == "test_general":
        await handle_test_general(query, context)
    elif data == "test_drinks":
        await handle_test_drinks(query)
    elif data.startswith("test_drink_"):
        category = data.split("_")[2]
        await handle_test_drink_category(query, category, context)
    elif data == "test_main_menu":
        await handle_test_main_menu(query)
    elif data == "test_compositions":
        await handle_test_compositions(query)
    elif data.startswith("test_compositions_"):
        category_name = data.split("_", 2)[2]
        await handle_test_compositions_category(query, category_name)
    elif data.startswith("test_composition_dish_"):
        dish_id = int(data.split("_")[3])
        await handle_test_composition_dish(query, dish_id, context)
    elif data.startswith("test_full_menu"):
        await handle_test_full_menu(query, context)
    elif data == "test_work_features":
        await handle_work_features_test(query, context)
    elif data == "cancel_test":
        await handle_cancel_test(query, context)
    elif data == "work_day":
        await handle_day_shift(query)
    elif data == "work_evening":
        await handle_evening_shift(query)
    elif data == "work_iiko":
        await handle_iiko(query)
    elif data == "work_dating":
        await handle_dating(query)
    elif data == "work_service":
        await handle_service(query)
    elif data == "work_special":
        await handle_special(query)
    elif data == "work_base":
        await handle_base(query)
    elif data == "work_host":
        await handle_host(query)
    elif data == "work_wine":
        await handle_wine(query)
    elif data == "work_bar":
        await handle_bar(query)
    elif data == "work_delivery":
        await handle_delivery(query)
    elif data == "work_bring":
        await handle_bring(query)
    elif data in await get_categories():
        await handle_category(query, data)
    elif data == 'take_order':
        await handle_take_order(query)
    elif data == "no_comment_dish":
        current_dish = context.user_data.pop('current_dish', None)
        current_quantity = context.user_data.pop('current_quantity', None)
        if current_dish and current_quantity:
            if 'order' not in context.user_data:
                context.user_data['order'] = []
            context.user_data['order'].append({
                "dish": current_dish,
                "quantity": current_quantity,
                "comment": None
            })
            await query.message.reply_text(
                f"–ë–ª—é–¥–æ *{current_dish[1]}* x{current_quantity} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")],
                    [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="take_order")]
                ])
            )
        else:
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑.")
    elif data == "no_comment_drink":
        current_drink = context.user_data.pop('current_drink', None)
        current_quantity = context.user_data.pop('current_quantity', None)
        if current_drink and current_quantity:
            if 'order' not in context.user_data:
                context.user_data['order'] = []
            context.user_data['order'].append({
                "drink": current_drink,
                "quantity": current_quantity,
                "comment": None
            })
            await query.message.reply_text(
                f"–ù–∞–ø–∏—Ç–æ–∫ *{current_drink[1]}* x{current_quantity} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")],
                    [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="take_order")]
                ])
            )
        else:
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑.")
    elif data == 'order_food':
        await handle_order_food(query)
    elif data.startswith('order_category_'):
        category_name = data.split('_')[2]
        await handle_order_category(query, category_name)
    elif data.startswith('order_dish_'):
        context.user_data.pop('awaiting_question_for_order_dish', None)
        dish_id = int(data.split('_')[2])
        await handle_order_dish(query, dish_id)
    elif data.startswith("ask_order_dish_"):
        dish_id = int(data.split("_")[3])
        dish_data = await get_dish_by_id(dish_id)
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É:")
        context.user_data['awaiting_question_for_order_dish'] = dish_data
    elif data == 'order_drinks':
        await handle_order_drinks(query)
    elif data.startswith('drink_order_category_'):
        category_name = data.split('_')[3]
        await handle_drink_order_category(query, category_name)
    elif data.startswith('drk_ord_sub_'):
        _, _, _, category_name, subcategory_name = data.split('_')
        await handle_drink_order_subcategory(query, category_name, subcategory_name)
    elif data.startswith('order_drink_'):
        context.user_data.pop('awaiting_question_for_order_drink', None)
        drink_id = int(data.split('_')[2])
        await handle_order_drink(query, drink_id)
    elif data.startswith('drink_ok_'):
        drink_id = int(data.split('_')[2])
        await handle_drink_ok(query, drink_id, context)
    elif data.startswith("ask_order_drink_"):
        drink_id = int(data.split("_")[3])
        drink_data = await get_drink_by_id(drink_id)
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø–∏—Ç–∫—É:")
        context.user_data['awaiting_question_for_order_drink'] = drink_data
    elif data.startswith("dish_ok_"):
        dish_id = int(data.split('_')[2])
        await handle_dish_ok(query, dish_id, context)
    elif data == "finish_order":
        await handle_finish_order(query, context)
    elif data == 'drinks':
        await handle_drinks_menu(query)
    elif data.startswith("drink_category_"):
        category_name = data.split("_")[2]
        await handle_drink_category(query, category_name)
    elif data.startswith("drink_subcategory_"):
        _, _, category_name, subcategory_name = data.split("_")
        await handle_drink_subcategory(query, category_name, subcategory_name)
    elif data.startswith("get_drink_"):
        drink_id = int(data.split("_")[2])
        await handle_drink(query, drink_id)
    elif data.startswith("dish_"):
        dish_id = int(data.split("_")[1])
        await handle_dish(query, dish_id)
    elif data.startswith("category_"):
        context.user_data.pop('awaiting_question_for_dish')
        category_name = data.split("_")[1]
        await query.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–ª—é–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ.")
        await handle_category(query, category_name)
    elif data.startswith("back_drink_"):
        context.user_data.pop('awaiting_question_for_drink', '')
        category_name = data.split("_")[2]
        subcategory_name = data.split("_")[3]
        await query.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –Ω–∞–ø–∏—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞–ø–∏—Ç–æ–∫.")
        await handle_drink_subcategory(query, category_name, subcategory_name)
    elif data.startswith("ask_drink_"):
        drink_id = int(data.split("_")[2])
        drink_data = await get_drink_by_id(drink_id)
        if drink_data:
            context.user_data['awaiting_question_for_drink'] = drink_data
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø–∏—Ç–∫—É:")
        else:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø–∏—Ç–∫–µ.")
    elif data.startswith("ask_dish_"):
        dish_id = int(data.split("_")[2])
        dish_data = await get_dish_by_id(dish_id)
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É:")
        context.user_data['awaiting_question_for_dish'] = dish_data
    elif data == 'general_question':
        context.user_data['general_question_in_progress'] = True
        keyboard = [[InlineKeyboardButton("‚èπ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="stop_chat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üó£ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–º–Ω—é –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ*.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif data == "stop_chat":
        context.user_data.pop("general_question_in_progress", None)
        context.user_data.pop("conversation_history", None)
        await query.message.reply_text(
            "üîö –û–±—â–∏–π –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="welcome")]])
        )
    elif data == 'welcome':
        await handle_welcome(query)
    elif data == 'links':
        await handle_links(query)  # –§—É–Ω–∫—Ü–∏—é —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    else:
        logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_data: {data}")


async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    user_message = update.message.text
    if context.user_data.get("test_general_in_progress"):
        await handle_general_test_answer(update, context)
        return
    elif context.user_data.get("test_composition_in_progress"):
        await handle_test_composition_answer(update, context)
        return
    elif context.user_data.get("test_menu_in_progress"):
        await handle_menu_test_answer(update, context)
        return
    elif context.user_data.get("test_in_progress"):
        await handle_work_features_answer(update, context)
        return
    elif context.user_data.get("test_drinks_in_progress"):
        await handle_drink_test_answer(update, context)
        return

    add_to_history(context, update.effective_user.id, "user", user_message)

    if context.user_data.get("general_question_in_progress"):
        user_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–º—É –¥–µ–ª—É –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞-—Å—Ç–∞–∂–µ—Ä–∞. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–µ–Ω—é (–±–ª—é–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏), —Å–µ—Ä–≤–∏—Å–æ–º, —Ä–∞–±–æ—Ç–æ–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ –≤—Å–µ–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '–•–∞—á–∞–ø—É—Ä–∏ –∏ –í–∏–Ω–æ'.\n\n"
            "üìå –¢—ã –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–º–µ–Ω—é, –Ω–∞–ø–∏—Ç–∫–∏, —Å–µ—Ä–≤–∏—Å). "
            "üìå –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –±–ª—é–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "üìå –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –ø—Ä–æ—Å—è—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –Ω–æ –Ω—É–∂–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–ø–∏—Ç–∫–∞ –Ω–µ—Ç, —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –≤ –º–µ–Ω—é, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¢–û–õ–¨–ö–û –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "üìå –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –Ω–æ–≤—ã—Ö –±–ª—é–¥, –Ω–æ–≤—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, –Ω–æ–≤—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –Ω–æ–≤—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. "
            "üìå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±–ª—é–¥–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∏ –Ω–µ –ø—ã—Ç–∞–π—Å—è –µ–≥–æ –æ–ø–∏—Å–∞—Ç—å.\n\n"
            f"üîπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{context.user_data.get('conversation_history', [])}\n\n"
            f"üó£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}"
        )
        waiting_message = await update.message.reply_text("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        asyncio.create_task(process_openai_general_answer(update, context, user_prompt, waiting_message))
    elif 'current_dish' in context.user_data and 'current_quantity' not in context.user_data:
        try:
            quantity = int(user_message)
            if quantity <= 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            context.user_data['current_quantity'] = quantity
            keyboard = [[InlineKeyboardButton("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="no_comment_dish")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª—é–¥—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'):",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")
    elif 'current_dish' in context.user_data and 'current_quantity' in context.user_data:
        current_dish = context.user_data.pop('current_dish')
        current_quantity = context.user_data.pop('current_quantity')
        comment = user_message if user_message.strip().lower() != "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        if 'order' not in context.user_data:
            context.user_data['order'] = []
        context.user_data['order'].append({
            "dish": current_dish,
            "quantity": current_quantity,
            "comment": comment
        })
        await update.message.reply_text(
            f"–ë–ª—é–¥–æ *{current_dish[1]}* x{current_quantity} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")],
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="take_order")]
            ])
        )
    elif 'current_drink' in context.user_data and 'current_quantity' not in context.user_data:
        try:
            quantity = int(user_message)
            if quantity <= 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return
            context.user_data['current_quantity'] = quantity
            keyboard = [[InlineKeyboardButton("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="no_comment_drink")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞–ø–∏—Ç–∫—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'):",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")
    elif 'current_drink' in context.user_data and 'current_quantity' in context.user_data:
        current_drink = context.user_data.pop('current_drink')
        current_quantity = context.user_data.pop('current_quantity')
        comment = user_message if user_message.strip().lower() != "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        if 'order' not in context.user_data:
            context.user_data['order'] = []
        context.user_data['order'].append({
            "drink": current_drink,
            "quantity": current_quantity,
            "comment": comment
        })
        await update.message.reply_text(
            f"–ù–∞–ø–∏—Ç–æ–∫ *{current_drink[1]}* x{current_quantity} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")],
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="take_order")]
            ])
        )
    elif 'awaiting_question_for_dish' in context.user_data:
        await handle_entity_question(update, context, 'awaiting_question_for_dish', 'dish')
    elif 'awaiting_question_for_drink' in context.user_data:
        await handle_entity_question(update, context, 'awaiting_question_for_drink', 'drink')
    elif 'awaiting_question_for_order_dish' in context.user_data:
        await handle_entity_question(update, context, 'awaiting_question_for_order_dish', 'dish')
    elif 'awaiting_question_for_order_drink' in context.user_data:
        await handle_entity_question(update, context, 'awaiting_question_for_order_drink', 'drink')
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.")


# =============================================================================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =============================================================================
def main() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    """
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
